Asynchronous programming for Python
-----------------------------------
C# like Async/Await paradigm for asynchronous programming in Python

#------------------------------------------------------------------------------#
# Types                                                                        #
#------------------------------------------------------------------------------#
Future:
-------
    Main type to keep/pass/wait result of asynchronous operation

    Methods:
        #------------------------------------------------------------------#
        # State                                                            #
        #------------------------------------------------------------------#
        Result () -> T
            Get result of future
            if future is completed successfully returns result of the future
            if future is failed reraise an error
            if future is not completed raise FutureNotReady

        Error () -> (ExceptionType, Exception, Traceback)?
            Error or None if future is completed successfully or not completed

        IsCompleted () -> bool
            Check if future is completed

        #------------------------------------------------------------------#
        # Continuation                                                     #
        #------------------------------------------------------------------#
        Continue (cont:Func<Future<T>>) -> None
            Continue with function "cont" with future as argument

        ContinueSafe (cont:Func<Future<T>>) -> None
            Safe version of Continue function

        ContinueWith (cont:Func<Future<T>, TResult>) -> Future<TResult>
            Transform future with continuation

Core:
-----
    Asynchronous core for IO/Sleep operations

    Methods:
        #------------------------------------------------------------------#
        # Factory                                                          #
        #------------------------------------------------------------------#
        Instance () -> None
            Singleton instance

        #------------------------------------------------------------------#
        # Execute                                                          #
        #------------------------------------------------------------------#
        Execute () -> None
            Run core

        Iterate (block:bool = True) -> None
            Perform single iteration

        Dispose (error:Exception = None) -> None
            Dispose core and resovle all pending futures with error

        #------------------------------------------------------------------#
        # Polling                                                          #
        #------------------------------------------------------------------#
        Poll (fd:int, mask:int, cancel:?Future = None) -> Future<int>
            Wait for "mask" event on descriptor "fd" on success return event mask
            It also can raise:
                CoreDisconnectedError - the device has been disconnected
                CoreInvalidError      - the specified fd is invalid
                CoreIOError           - an error has occurred on the device or stream

        #------------------------------------------------------------------#
        # Sleeping                                                         #
        #------------------------------------------------------------------#
        Sleep (delay:float, cancel:?Future = None) -> Future<float>
            Complete future after at least "delay" seconds have passed

        SleepUntil (time:float, cancel:?Future = None) -> Future<float>
            Complete future after "time" (unix time) has been reached

        Idle (cancel:?Future = None) -> Future<None>
            Complete sometime later

Asynchronous Objects:
---------------------

    AsyncFile:
        #----------------------------------------------------------#
        # Reading                                                  #
        #----------------------------------------------------------#
        Read (size:int) -> Future<data>
        ReadExactly (size:int) -> Future<data>
        ReadExactlyInto (size:int, stream:stream) -> Future<stream>

        #----------------------------------------------------------#
        # Writing                                                  #
        #----------------------------------------------------------#
        Write (data) -> Future<None>

    AsyncSocket is an AsyncFile with additional methods
        #----------------------------------------------------------#
        # Socket Methods                                           #
        #----------------------------------------------------------#
        Bind    (address)   -> None
        Listen  (backlog)   -> None
        Accept  ()          -> Future<(AsyncSocket, address)>
        Connect (address:?) -> Future<AsyncSocket>

#------------------------------------------------------------------------------#
# Functions                                                                    #
#------------------------------------------------------------------------------#
Composition:
------------
    AnyFuture (IEnumerable <futures:Future<Object>>) -> Future<Future<Object>>
        Future with the first resolved future as result

    AllFuture (IEnumerable <futures:Future<Object>>) -> Future<None>
        Future wich will be resolved when all futures are resolved

#------------------------------------------------------------------------------#
# Decorators                                                                   #
#------------------------------------------------------------------------------#
Async:
    Decorator converting generator to asynchronous function

DummyAsync:
    Wrap result of funciton into Future

LimitAsync:
    Limit access to asynchronous function

#------------------------------------------------------------------------------#
# Example: Echo Server                                                         #
#------------------------------------------------------------------------------#
import socket
from async import Async, AsyncSocket, Core

def main ():
    with Core.Instance () as core:
        sock = AsyncSocket (socket.socket ())
        sock.Bind   (('localhost', 8000))
        sock.Listen (10)

        @Async
        def process (sock, addr):
            while True:
                yield sock.Write ((yield sock.Read (1 << 20)))

        @Async
        def server ():
            while True:
                process (*(yield sock.Accept ())).Traceback ('process')

        server ().Traceback ('server')
        core.Execute ()

if __name__ == '__main__':
    main ()

# vim: nu columns=120 :
